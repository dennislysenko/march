{"name":"March","tagline":"a go deployment tool, insanely lightweight and not unlike capistrano, written in ruby","body":"# march - a go deployment tool written in ruby\r\n\r\nMarch is an in-house deployment tool that acts as an insanely lightweight capistrano and allows you to build and deploy\r\na go package to run as a pseudo-daemon on remote servers without any hassle.\r\n\r\n**It takes a minute to set up and makes your deploy workload almost nil.**\r\n\r\n## setup\r\n\r\nCreate a `march` directory containing a single file: `config.yml`. Add `march/build` to your `.gitignore` as that is \r\nwhere intermediate binaries are stored.\r\n\r\nIn this file, you can specify the following options:\r\n\r\n    # Specifies the remote path to which march will deploy.\r\n    deploy_path: /home/deploy/yourscript\r\n    \r\n    # Specify extra env vars. \r\n    env:\r\n      ENV_FILENAME: /home/deploy/yourscript/.env\r\n    \r\n    # The name of the binary generated by `go build`. \r\n    go_binary_name: yourscript\r\n       \r\n    # This is the base property list that is applied to all servers in all stages.\r\n    # Anything specified in the config for a specific server will override these defaults.\r\n    # e.g. if I created a server below (under stages) and specified go_os: windows, it would \r\n    server_defaults:\r\n      go_os: linux\r\n      user: deploy\r\n      port: 22\r\n    \r\n    stages:\r\n      staging:\r\n        servers:\r\n          - host: staging.yourapp.com\r\n    \r\n      production:\r\n        servers:\r\n          - host: app-1.yourapp.com\r\n            port: 2222\r\n          - host: app-2.yourapp.com\r\n          - host: app-3.yourapp.com\r\n\r\nAll files in the assets/ folder in your Go source directly will be copied directly to the server and can be accessed at\r\n`os.Getenv('MARCH_ASSETS_PATH')`.\r\n\r\n## commands\r\n\r\n**format**: `march {stage} {command}`\r\n\r\n- `deploy`: builds your go package into a binary and uploads it along with some support files to your `deploy_path` on \r\n  all servers matching that stage.\r\n- `logs`: tails the logs of your go program\r\n\r\n## issues\r\nFeel free to log any issues, inconsistencies, or non-user-friendliness you find on the github issue tracker for this \r\nrepository.\r\n\r\n## todo\r\n- Reevaluate the logging system\r\n- Fully daemonize the go binary process so it continues running through server restarts\r\n- Deploy versioning (capistrano-style)\r\n    - rollback to previous deploys\r\n- Zero-downtime deployment\r\n- Reevaluate how march kills already-running processes, right now it terminates them completely off-hand\r\n    - maybe send an interrupt allowing the server to shut down gracefully, and terminate the process after a set, \r\n    `config.yml`-specifiable amount of time","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}